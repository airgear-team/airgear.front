import {useState, useEffect} from 'react';import {Link} from 'react-router-dom';import style from './ProductCard.module.scss';import LikeIcon from "../../assets/images/icons/Star.svg?react";import DefaultImage from "../../assets/images/default-image.png";export default function ProductCard(props) {    const {item} = props;    const [itemImg, setItemImg] = useState(null);    const itemId = item?.id;    const itemProductUrl = `/product/${itemId}`;  // Зміна тут    const itemName = item?.name;    const itemPrice = item?.price.priceAmount;    const itemCurrency = item?.currency;    const itemCity = item?.city;    const itemNew = item?.goodsCondition;    const itemLike = item?.like;    const likeStatus = `${itemLike ? `${style.product_like}` : ''}`;    function formatNumber(number) {        return number.toString().replace(/\B(?=(\d{3})+(?!\d))/g, " ");    }    useEffect(() => {        let isMounted = true;        async function fetchImage() {            const token = localStorage.getItem('token');            try {                const response = await fetch(`http://localhost:8080/images/${itemId}/images`, {                    headers: {                        'Authorization': `Bearer ${token}`                    }                });                if (!isMounted) return;                const data = await response.json();                if (data.length > 0) {                    const imageId = data[0].imageUrl;                    const imageResponse = await fetch(`http://localhost:8080/images/${imageId}`);                    const newImageUrl = imageResponse.ok                        ? URL.createObjectURL(await imageResponse.blob())                        : DefaultImage;                    if (isMounted) {                        setItemImg(newImageUrl);                    }                } else {                    setItemImg(DefaultImage);                }            } catch (error) {                console.error('Error fetching image:', error);                setItemImg(DefaultImage);            }        }        fetchImage();        return () => {            if (itemImg) {                URL.revokeObjectURL(itemImg);            }            isMounted = false;        };    }, [itemId]);    const showImage = () => {        if (!itemImg) {            return <img src={DefaultImage} alt="Немає зображення"/>;        } else {            return <img src={itemImg} alt="product image"/>;        }    }    return (        <li className={`${style.product_card} ${likeStatus}`} data-id={itemId}>            <Link to={itemProductUrl}>  {/* Зміна тут */}                <div className='product_card__top'>                    <div className={`${style.product_card__image_box} ibg`}>                        {showImage()}                        {!!itemNew && <div className={style.product_card__label}>NEW</div>}                        <button className={style.product_card__like_button} type="button"><LikeIcon/></button>                    </div>                </div>                <div className={style.info}>                    <div className={style.product_card__headline}>                        {itemName && <h3 className={style.product_card__name}>{itemName}</h3>}                    </div>                    {itemPrice && (                        <h2 className={style.product_card__price}>                            <span className={style.product_card__price_number}>{formatNumber(itemPrice)}</span>                            <span className="product_card__price_currency">{itemCurrency ?? 'грн'}</span>                        </h2>                    )}                    {itemCity && <h4 className="product_card__town">{itemCity}</h4>}                </div>            </Link>        </li>    );}